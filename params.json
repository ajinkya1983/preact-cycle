{"name":"preact-cycle","tagline":"♻️ Minimal functional Virtual DOM rendering using Preact 🚵","body":"# preact-cycle\r\n\r\n[![NPM](https://img.shields.io/npm/v/preact-cycle.svg)](https://www.npmjs.com/package/preact-cycle)\r\n[![travis-ci](https://travis-ci.org/developit/preact-cycle.svg?branch=master)](https://travis-ci.org/developit/preact-cycle)\r\n\r\n> Minimal functional _(-reactive)_ Virtual DOM rendering using [Preact].\r\n\r\n\r\n---\r\n\r\n\r\n### Simple Example\r\n\r\n[**View this example on esnextb.in**](http://esnextb.in/?gist=d804796c481218488309)\r\n\r\n```js\r\nimport { render, h } from 'preact-cycle';\r\n/** @jsx h */\r\n\r\nconst App = ({ value, mutation }) => (\r\n  <div>\r\n    <p>Value: { value }</p>\r\n    <button onClick={ mutation('value', v => v+1) }>Increment</button>\r\n  </div>\r\n);\r\n\r\nrender(App, { value: 0 });\r\n```\r\n\r\n\r\n---\r\n\r\n\r\n### To-Do List Example\r\n\r\nA simple example, where reducers are just pure functions.\r\nNote that `TOGGLE` mutates state in-place, which works fine but is discouraged.\r\n\r\n[**View this example on esnextb.in**](http://esnextb.in/?gist=9c992087c4133003a716)\r\n\r\n```js\r\nimport { render, h } from 'preact-cycle';\r\n/** @jsx h */\r\n\r\nconst ADD = ({ text, todos, ...state }) => ({\r\n  todos: todos.concat({ text }),\r\n  text: '',\r\n  ...state\r\n});\r\n\r\nconst TOGGLE = (state, todo) => {\r\n  todo.done = !todo.done;\r\n  return state;\r\n};\r\n\r\nconst REMOVE = ({ todos, ...state }, todo) => ({\r\n  todos: todos.filter( t => t!==todo ),\r\n  ...state\r\n});\r\n\r\n\r\nconst TodoList = ({ text, todos, mutate, mutation }) => (\r\n  <div>\r\n    <form onSubmit={mutation(ADD)} action=\"javascript:\">\r\n      <input value={text} onInput={e => mutate('text', e.target.value)} />\r\n      <button action=\"submit\">Add</button>\r\n    </form>\r\n    <ul>\r\n      { todos.map( todo => (\r\n        <li onClick={mutation(TOGGLE, todo)}>\r\n          <input type=\"checkbox\" checked={todo.done} readonly />\r\n          <p>{ todo.text }</p>\r\n          <a onClick={mutation(REMOVE, todo)}>✕</a>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nrender(TodoList, { todos: [] }, document.body);\r\n```\r\n\r\n\r\n---\r\n\r\n\r\n### Component-Based Example\r\n\r\nNormal [preact] components still work great with preact-cycle. As of `v0.4`, `mutate()` and `mutation()` are conveniently available as [context] properties, which means they are automatically passed down through the VDOM tree. For pure functional components, [context] is simply passed as a second argument.\r\n\r\nA component-based variant of the previous To-Do List example follows, using pure functions and context.\r\n\r\n[**View this example on Webpackbin**](http://www.webpackbin.com/EyjngQinx)\r\n\r\n```js\r\nimport { h, render } from 'preact-cycle';\r\n/** @jsx h */\r\n\r\n\r\n/** initial data to populate the store */\r\nconst INITIAL_DATA = {\r\n  todos: [\r\n    { text:'Type some text' },\r\n    { text:'...then hit [enter]' },\r\n    { text:'Now you\\'re productive!' }\r\n  ]\r\n};\r\n\r\n/** Appends a new todo item */\r\nconst ADD = ({ todos, text, ...state }) => ({\r\n  todos: todos.concat({ text }),\r\n  text: '',\r\n  ...state\r\n});\r\n\r\n/** Remove the given todo item */\r\nconst REMOVE = ({ todos, ...state }, todo) => ({\r\n  todos: todos.filter(t => t!==todo),\r\n  ...state\r\n});\r\n\r\n/** Toggles the given todo item as done */\r\nconst TOGGLE = (state, todo) => {\r\n  todo.done = !todo.done;\r\n};\r\n\r\n\r\n/** a simple helper to derive a mutated value from an event */\r\nlet fromEvent = (prev, e) => e.target.value;\r\n\r\n\r\n/** The todo list app */\r\nconst App = ({ text, todos }) => (\r\n  <div id=\"app\">\r\n    <Form text={text} />\r\n    <ul>{ todos.map( todo => (\r\n      <Item todo={todo} />\r\n    )) }</ul>\r\n  </div>\r\n);\r\n\r\n/** New todo entry form */\r\nconst Form = ({ text }, { mutation }) => (\r\n  <form onSubmit={mutation(ADD)} action=\"javascript:\">\r\n    <input placeholder=\"New item...\"\r\n      value={text}\r\n      onInput={mutation('text', fromEvent)} />\r\n  </form>\r\n);\r\n\r\n/** A single todo list item */\r\nconst Item = ({ todo }, { mutation }) => (\r\n  <li onClick={mutation(TOGGLE, todo)} class={{ done: todo.done }}>\r\n    <input type=\"checkbox\" checked={todo.done} readonly />\r\n    <a onClick={mutation(REMOVE, todo)}>✕</a>\r\n    <p>{ todo.text }</p>\r\n  </li>\r\n);\r\n\r\n// Kick off the cycle!\r\nrender(App, INITIAL_DATA, document.body);\r\n```\r\n\r\n\r\n---\r\n\r\n\r\n### License\r\n\r\n[MIT]\r\n\r\n\r\n[Preact]: https://github.com/developit/preact\r\n[context]: https://facebook.github.io/react/docs/context.html\r\n[MIT]: http://choosealicense.com/licenses/mit/\r\n","google":"UA-6031694-18","note":"Don't delete this file! It's used internally to help with page regeneration."}